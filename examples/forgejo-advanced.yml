name: Claude for Forgejo - Advanced Configuration

# Advanced Forgejo integration with multiple authentication methods and custom tools
# This example shows more sophisticated configuration options

on:
  issue_comment:
    types: [created]
  issues:
    types: [opened, assigned, labeled]
  pull_request:
    types: [opened, synchronize, reopened, closed]
  pull_request_review:
    types: [submitted, edited]
  pull_request_review_comment:
    types: [created]

jobs:
  claude-response:
    runs-on: ubuntu-latest

    # Enhanced conditions for multiple trigger types
    if: >
      (github.event_name == 'issue_comment' && (contains(github.event.comment.body, '@claude') || contains(github.event.comment.body, '/claude'))) ||
      (github.event_name == 'issues' && github.event.action == 'assigned' && github.event.assignee.login == 'claude-bot') ||
      (github.event_name == 'issues' && github.event.action == 'labeled' && github.event.label.name == 'claude-help') ||
      (github.event_name == 'issues' && github.event.action == 'opened' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude'))) ||
      (github.event_name == 'pull_request' && github.event.action == 'opened' && contains(github.event.pull_request.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude'))

    steps:
      - name: Claude Code Response
        uses: anthropics/claude-code-action@v1
        with:
          # Forgejo Configuration
          forge_type: forgejo
          forge_api_url: ${{ vars.FORGEJO_API_URL }} # Use repository variable
          forge_server_url: ${{ vars.FORGEJO_SERVER_URL }} # Use repository variable

          # Multiple trigger methods
          trigger_phrase: "@claude"
          assignee_trigger: "claude-bot"
          label_trigger: "claude-help"

          # Branch and commit configuration
          base_branch: develop # Use develop branch instead of main
          branch_prefix: "claude-fix/" # Custom branch naming
          use_commit_signing: true # Enable commit signing

          # Conversation limits
          max_turns: 5
          timeout_minutes: 30

          # Enhanced tool access
          allowed_tools: |
            mcp__file_ops__read
            mcp__file_ops__write
            mcp__file_ops__create
            npm
            docker

          # Disable problematic tools
          disallowed_tools: |
            rm
            sudo

          # Custom instructions for your project
          custom_instructions: |
            You are working on a Go microservices project using Docker and Kubernetes.
            Always follow these guidelines:
            - Use Go modules for dependency management
            - Write tests for all new code
            - Follow the existing code style and patterns
            - Update documentation when making changes
            - Consider security implications of changes

          # Model configuration (optional)
          model: claude-3-5-sonnet-20241022
          fallback_model: claude-3-haiku-20240307

          # Advanced MCP configuration
          mcp_config: |
            {
              "mcpServers": {
                "linting": {
                  "command": "npx",
                  "args": ["@modelcontextprotocol/server-everything"],
                  "env": {
                    "NODE_ENV": "production"
                  }
                }
              }
            }

          # Additional permissions for CI/CD integration
          additional_permissions: |
            actions: read
            checks: read

          # Network restrictions (if needed)
          experimental_allowed_domains: |
            api.github.com
            your-forgejo-instance.com
            registry.npmjs.org
            proxy.golang.org

        env:
          # Primary authentication - choose one method:

          # Option 1: Direct Anthropic API
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

          # Option 2: Claude Code OAuth (Pro/Max users)
          # CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Option 3: AWS Bedrock (uncomment and set use_bedrock: true above)
          # AWS_REGION: us-west-2
          # AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}

          # Option 4: Google Vertex AI (uncomment and set use_vertex: true above)
          # GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          # GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}

          # Forgejo authentication
          GITHUB_TOKEN: ${{ secrets.FORGEJO_TOKEN }}

          # Custom environment variables for Claude
          CLAUDE_ENV: |
            PROJECT_TYPE: microservices
            LANGUAGE: go
            CONTAINER_RUNTIME: docker
            DEPLOYMENT_TARGET: kubernetes

  # Optional: Notification job for failed runs
  notify-failure:
    runs-on: ubuntu-latest
    needs: [claude-response]
    if: failure()

    steps:
      - name: Notify on Failure
        run: |
          echo "Claude workflow failed. Check the logs for details."
          # Add your notification logic here (Slack, email, etc.)
